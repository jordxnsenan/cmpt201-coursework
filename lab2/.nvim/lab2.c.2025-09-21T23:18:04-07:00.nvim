#define _GNU_SOURCE // needed to add this for newline function to work
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void) 
{

  char *userInput = NULL;
  size_t bufferSize = 0;

  pid_t processID;

  while (1) 
  {
    printf("Enter programs to run: ");
    getline(&userInput, &bufferSize, stdin);

    // removes trailing newline as per hint 1
    userInput[strcspn(userInput, "\n")] = '\0';

    // exit when only enter pressed by user
    size_t lengthOfInput = strlen(userInput);
    if (lengthOfInput == 0) {
      printf("Exiting Program.\n");

      break;
    }

    // checks if user typed 'exit'
    bool typedExit = strcmp(userInput, "exit") == 0;
    if (typedExit) {
      printf("Exiting Program\n");

      break;
    }

    // checks if user typed 'joke'
    bool typedJoke = strcmp(userInput, "joke") == 0;
    if (typedJoke) {
      printf("What do you call a group of programmers? An Assembly\n");

      continue;
    }

    processID = fork();

    if (processID == 0) {
      execl(userInput, userInput, NULL);
      printf("ERROR: exec failed\n");

      exit(EXIT_FAILURE);
    }

    else if (processID > 0) {
      waitpid(processID, NULL, 0);
    }

    else {
      perror("ERROR: fork failed\n");

      exit(EXIT_FAILURE);
    }

    free(userInput);
  }

  return 0;
}

// function that prompts for and returns a users string input
char* getUserInput()
{
  char* input = NULL;
  size_t bufferSize = 0;

  getline(&input, &bufferSize, stdin);
  
  // remove the trailing newline
  input[strcspn(input, "\n")] = '\0';

  return input;
}

// function that performs specific operation based on the users passed string
char* determineUserRequest(const char* input)
{
  const int EXIT_COMMAND = 0;
  const int JOKE_COMMAND = 1;
  const int NORMAL_COMMAND = 2;

  bool emptyString = strlen(input) == 0;
  if(emptyString)
  {
    printf("Exiting Program...\n");

    return EXIT_COMMAND;
  }

  bool choseExit = strcmp(input, "exit") == 0;
  if(choseExit)
  {
    printf("Exiting Program...\n");

    return EXIT_COMMAND;
  }

  bool choseJoke = strcmp(input, "joke") == 0;
  if(choseJoke)
  {
    printf("What do you call a group of programmers? An Assembly!\n");

    return JOKE_COMMAND;
  }

  return NORMAL_COMMAND;
}

void handleUserRequest(const char* option)
{
  pid_t processId = fork();

  if(processId == 0)
  {
    execlp(option, option, NULL);
    perror("ERROR: exec failed...\n");

    exit(EXIT_FAILURE);
  }

  elseif(processId > 0)
  {
    waitpid(processID, NULL, 0);
  }

  else
  {
    perror("ERROR: fork failed...\n");

    exit(EXIT_FAILURE);
  }
}
