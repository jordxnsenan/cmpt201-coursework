#define _GNU_SOURCE // needed to add this for newline function to work
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <unistd.h>

void handleUserRequest(const char*);
char *getUserInput(void);
int processUserInput(const char*);

int main(void) {

  while (1) {
    printf("Enter programs to run: ");

    char *userInput = getUserInput();

    int userOption = processUserInput(userInput);
    
    if(userOption == 0)
    {
      free(userInput);

      break;
    }

    else if(userOption == NORMAL_ACTION)
    {
      free(userInput);

      continue;
    }

    else
    {
      handleUserRequest(userInput);
    }

    free(userInput);
  }

  return 0;
}

// function that prompts for and returns a users string input
char *getUserInput() {
  char *input = NULL;
  size_t bufferSize = 0;

  getline(&input, &bufferSize, stdin);

  // remove the trailing newline
  input[strcspn(input, "\n")] = '\0';

  return input;
}

// function that performs specific operation based on the users passed string
int processUserInput(const char *input) {
  const int EXIT_COMMAND = 0;
  const int JOKE_COMMAND = 1;
  const int NORMAL_COMMAND = 2;

  bool emptyString = strlen(input) == 0;
  if (emptyString) {
    printf("Exiting Program...\n");

    return EXIT_COMMAND;
  }

  bool choseExit = strcmp(input, "exit") == 0;
  if (choseExit) {
    printf("Exiting Program...\n");

    return EXIT_COMMAND;
  }

  bool choseJoke = strcmp(input, "joke") == 0;
  if (choseJoke) {
    printf("What do you call a group of programmers? An Assembly!\n");

    return JOKE_COMMAND;
  }

  return NORMAL_COMMAND;
}

void handleUserRequest(const char *option) {
  pid_t processId = fork();

  if (processId == 0) {
    execlp(option, option, NULL);
    perror("ERROR: exec failed...\n");

    exit(EXIT_FAILURE);
  }

  else if(processId > 0) { waitpid(processId, NULL, 0); }

  else {
    perror("ERROR: fork failed...\n");

    exit(EXIT_FAILURE);
  }
}
